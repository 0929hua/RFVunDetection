Block 0x0
[0x0:0x18]
---
Predecessors: []
Successors: [0x19, 0x47]
---
0x0 PUSH1 0x60
0x2 PUSH1 0x40
0x4 MSTORE
0x5 PUSH1 0xe0
0x7 PUSH1 0x2
0x9 EXP
0xa PUSH1 0x0
0xc CALLDATALOAD
0xd DIV
0xe PUSH4 0x41c0e1b5
0x13 DUP2
0x14 EQ
0x15 PUSH2 0x47
0x18 JUMPI
---
0x0: V0 = 0x60
0x2: V1 = 0x40
0x4: M[0x40] = 0x60
0x5: V2 = 0xe0
0x7: V3 = 0x2
0x9: V4 = EXP 0x2 0xe0
0xa: V5 = 0x0
0xc: V6 = CALLDATALOAD 0x0
0xd: V7 = DIV V6 0x100000000000000000000000000000000000000000000000000000000
0xe: V8 = 0x41c0e1b5
0x14: V9 = EQ V7 0x41c0e1b5
0x15: V10 = 0x47
0x18: JUMPI 0x47 V9
---
Entry stack: []
Stack pops: 0
Stack additions: [V7]
Exit stack: [V7]

================================

Block 0x19
[0x19:0x23]
---
Predecessors: [0x0]
Successors: [0x24, 0x70]
---
0x19 DUP1
0x1a PUSH4 0xbb34534c
0x1f EQ
0x20 PUSH2 0x70
0x23 JUMPI
---
0x1a: V11 = 0xbb34534c
0x1f: V12 = EQ 0xbb34534c V7
0x20: V13 = 0x70
0x23: JUMPI 0x70 V12
---
Entry stack: [V7]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V7]

================================

Block 0x24
[0x24:0x2e]
---
Predecessors: [0x19]
Successors: [0x2f, 0x94]
---
0x24 DUP1
0x25 PUSH4 0xe1fa8e84
0x2a EQ
0x2b PUSH2 0x94
0x2e JUMPI
---
0x25: V14 = 0xe1fa8e84
0x2a: V15 = EQ 0xe1fa8e84 V7
0x2b: V16 = 0x94
0x2e: JUMPI 0x94 V15
---
Entry stack: [V7]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V7]

================================

Block 0x2f
[0x2f:0x39]
---
Predecessors: [0x24]
Successors: [0x3a, 0xe2]
---
0x2f DUP1
0x30 PUSH4 0xe79a198f
0x35 EQ
0x36 PUSH2 0xe2
0x39 JUMPI
---
0x30: V17 = 0xe79a198f
0x35: V18 = EQ 0xe79a198f V7
0x36: V19 = 0xe2
0x39: JUMPI 0xe2 V18
---
Entry stack: [V7]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V7]

================================

Block 0x3a
[0x3a:0x44]
---
Predecessors: [0x2f]
Successors: [0x45, 0x131]
---
0x3a DUP1
0x3b PUSH4 0xf5c57382
0x40 EQ
0x41 PUSH2 0x131
0x44 JUMPI
---
0x3b: V20 = 0xf5c57382
0x40: V21 = EQ 0xf5c57382 V7
0x41: V22 = 0x131
0x44: JUMPI 0x131 V21
---
Entry stack: [V7]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V7]

================================

Block 0x45
[0x45:0x46]
---
Predecessors: [0x3a, 0x172, 0x2dc, 0x3bc]
Successors: []
---
0x45 JUMPDEST
0x46 STOP
---
0x45: JUMPDEST 
0x46: STOP 
---
Entry stack: [V7]
Stack pops: 0
Stack additions: []
Exit stack: [V7]

================================

Block 0x47
[0x47:0x62]
---
Predecessors: [0x0]
Successors: [0x63, 0x172]
---
0x47 JUMPDEST
0x48 PUSH2 0x45
0x4b PUSH1 0x0
0x4d SLOAD
0x4e PUSH1 0x1
0x50 PUSH1 0xa0
0x52 PUSH1 0x2
0x54 EXP
0x55 SUB
0x56 SWAP1
0x57 DUP2
0x58 AND
0x59 CALLER
0x5a SWAP1
0x5b SWAP2
0x5c AND
0x5d EQ
0x5e ISZERO
0x5f PUSH2 0x172
0x62 JUMPI
---
0x47: JUMPDEST 
0x48: V23 = 0x45
0x4b: V24 = 0x0
0x4d: V25 = S[0x0]
0x4e: V26 = 0x1
0x50: V27 = 0xa0
0x52: V28 = 0x2
0x54: V29 = EXP 0x2 0xa0
0x55: V30 = SUB 0x10000000000000000000000000000000000000000 0x1
0x58: V31 = AND 0xffffffffffffffffffffffffffffffffffffffff V25
0x59: V32 = CALLER
0x5c: V33 = AND 0xffffffffffffffffffffffffffffffffffffffff V32
0x5d: V34 = EQ V33 V31
0x5e: V35 = ISZERO V34
0x5f: V36 = 0x172
0x62: JUMPI 0x172 V35
---
Entry stack: [V7]
Stack pops: 0
Stack additions: [0x45]
Exit stack: [V7, 0x45]

================================

Block 0x63
[0x63:0x6f]
---
Predecessors: [0x47]
Successors: []
---
0x63 PUSH1 0x0
0x65 SLOAD
0x66 PUSH1 0x1
0x68 PUSH1 0xa0
0x6a PUSH1 0x2
0x6c EXP
0x6d SUB
0x6e AND
0x6f SELFDESTRUCT
---
0x63: V37 = 0x0
0x65: V38 = S[0x0]
0x66: V39 = 0x1
0x68: V40 = 0xa0
0x6a: V41 = 0x2
0x6c: V42 = EXP 0x2 0xa0
0x6d: V43 = SUB 0x10000000000000000000000000000000000000000 0x1
0x6e: V44 = AND 0xffffffffffffffffffffffffffffffffffffffff V38
0x6f: SELFDESTRUCT V44
---
Entry stack: [V7, 0x45]
Stack pops: 0
Stack additions: []
Exit stack: [V7, 0x45]

================================

Block 0x70
[0x70:0x8e]
---
Predecessors: [0x19]
Successors: [0x8f]
---
0x70 JUMPDEST
0x71 PUSH2 0x155
0x74 PUSH1 0x4
0x76 CALLDATALOAD
0x77 PUSH1 0x0
0x79 DUP2
0x7a DUP2
0x7b MSTORE
0x7c PUSH1 0x2
0x7e PUSH1 0x20
0x80 MSTORE
0x81 PUSH1 0x40
0x83 SWAP1
0x84 SHA3
0x85 SLOAD
0x86 PUSH1 0x1
0x88 PUSH1 0xa0
0x8a PUSH1 0x2
0x8c EXP
0x8d SUB
0x8e AND
---
0x70: JUMPDEST 
0x71: V45 = 0x155
0x74: V46 = 0x4
0x76: V47 = CALLDATALOAD 0x4
0x77: V48 = 0x0
0x7b: M[0x0] = V47
0x7c: V49 = 0x2
0x7e: V50 = 0x20
0x80: M[0x20] = 0x2
0x81: V51 = 0x40
0x84: V52 = SHA3 0x0 0x40
0x85: V53 = S[V52]
0x86: V54 = 0x1
0x88: V55 = 0xa0
0x8a: V56 = 0x2
0x8c: V57 = EXP 0x2 0xa0
0x8d: V58 = SUB 0x10000000000000000000000000000000000000000 0x1
0x8e: V59 = AND 0xffffffffffffffffffffffffffffffffffffffff V53
---
Entry stack: [V7]
Stack pops: 0
Stack additions: [0x155, V47, V59]
Exit stack: [V7, 0x155, V47, V59]

================================

Block 0x8f
[0x8f:0x93]
---
Predecessors: [0x70, 0x131]
Successors: [0x155, 0x168]
---
0x8f JUMPDEST
0x90 SWAP2
0x91 SWAP1
0x92 POP
0x93 JUMP
---
0x8f: JUMPDEST 
0x93: JUMP {0x155, 0x168}
---
Entry stack: [V7, {0x155, 0x168}, S1, S0]
Stack pops: 3
Stack additions: [S0]
Exit stack: [V7, S0]

================================

Block 0x94
[0x94:0xbb]
---
Predecessors: [0x24]
Successors: [0xbc, 0xd8]
---
0x94 JUMPDEST
0x95 PUSH2 0x45
0x98 PUSH1 0x4
0x9a CALLDATALOAD
0x9b PUSH1 0x0
0x9d DUP2
0x9e DUP2
0x9f MSTORE
0xa0 PUSH1 0x2
0xa2 PUSH1 0x20
0xa4 MSTORE
0xa5 PUSH1 0x40
0xa7 DUP2
0xa8 SHA3
0xa9 SLOAD
0xaa PUSH1 0x1
0xac PUSH1 0xa0
0xae PUSH1 0x2
0xb0 EXP
0xb1 SUB
0xb2 AND
0xb3 DUP2
0xb4 EQ
0xb5 DUP1
0xb6 ISZERO
0xb7 SWAP1
0xb8 PUSH2 0xd8
0xbb JUMPI
---
0x94: JUMPDEST 
0x95: V60 = 0x45
0x98: V61 = 0x4
0x9a: V62 = CALLDATALOAD 0x4
0x9b: V63 = 0x0
0x9f: M[0x0] = V62
0xa0: V64 = 0x2
0xa2: V65 = 0x20
0xa4: M[0x20] = 0x2
0xa5: V66 = 0x40
0xa8: V67 = SHA3 0x0 0x40
0xa9: V68 = S[V67]
0xaa: V69 = 0x1
0xac: V70 = 0xa0
0xae: V71 = 0x2
0xb0: V72 = EXP 0x2 0xa0
0xb1: V73 = SUB 0x10000000000000000000000000000000000000000 0x1
0xb2: V74 = AND 0xffffffffffffffffffffffffffffffffffffffff V68
0xb4: V75 = EQ 0x0 V74
0xb6: V76 = ISZERO V75
0xb8: V77 = 0xd8
0xbb: JUMPI 0xd8 V75
---
Entry stack: [V7]
Stack pops: 0
Stack additions: [0x45, V62, 0x0, V76]
Exit stack: [V7, 0x45, V62, 0x0, V76]

================================

Block 0xbc
[0xbc:0xd7]
---
Predecessors: [0x94]
Successors: [0xd8]
---
0xbc POP
0xbd PUSH1 0x3
0xbf PUSH1 0x20
0xc1 MSTORE
0xc2 PUSH1 0x40
0xc4 DUP2
0xc5 SHA3
0xc6 SLOAD
0xc7 PUSH1 0x1
0xc9 PUSH1 0xa0
0xcb PUSH1 0x2
0xcd EXP
0xce SUB
0xcf SWAP1
0xd0 DUP2
0xd1 AND
0xd2 ORIGIN
0xd3 SWAP1
0xd4 SWAP2
0xd5 AND
0xd6 EQ
0xd7 ISZERO
---
0xbd: V78 = 0x3
0xbf: V79 = 0x20
0xc1: M[0x20] = 0x3
0xc2: V80 = 0x40
0xc5: V81 = SHA3 0x0 0x40
0xc6: V82 = S[V81]
0xc7: V83 = 0x1
0xc9: V84 = 0xa0
0xcb: V85 = 0x2
0xcd: V86 = EXP 0x2 0xa0
0xce: V87 = SUB 0x10000000000000000000000000000000000000000 0x1
0xd1: V88 = AND 0xffffffffffffffffffffffffffffffffffffffff V82
0xd2: V89 = ORIGIN
0xd5: V90 = AND 0xffffffffffffffffffffffffffffffffffffffff V89
0xd6: V91 = EQ V90 V88
0xd7: V92 = ISZERO V91
---
Entry stack: [V7, 0x45, V62, 0x0, V76]
Stack pops: 2
Stack additions: [S1, V92]
Exit stack: [V7, 0x45, V62, 0x0, V92]

================================

Block 0xd8
[0xd8:0xdd]
---
Predecessors: [0x94, 0xbc]
Successors: [0xde, 0x174]
---
0xd8 JUMPDEST
0xd9 ISZERO
0xda PUSH2 0x174
0xdd JUMPI
---
0xd8: JUMPDEST 
0xd9: V93 = ISZERO S0
0xda: V94 = 0x174
0xdd: JUMPI 0x174 V93
---
Entry stack: [V7, 0x45, V62, 0x0, S0]
Stack pops: 1
Stack additions: []
Exit stack: [V7, 0x45, V62, 0x0]

================================

Block 0xde
[0xde:0xe1]
---
Predecessors: [0xd8]
Successors: [0x2dc]
---
0xde PUSH2 0x2dc
0xe1 JUMP
---
0xde: V95 = 0x2dc
0xe1: JUMP 0x2dc
---
Entry stack: [V7, 0x45, V62, 0x0]
Stack pops: 0
Stack additions: []
Exit stack: [V7, 0x45, V62, 0x0]

================================

Block 0xe2
[0xe2:0x106]
---
Predecessors: [0x2f]
Successors: [0x107, 0x127]
---
0xe2 JUMPDEST
0xe3 PUSH2 0x45
0xe6 CALLER
0xe7 PUSH1 0x1
0xe9 PUSH1 0xa0
0xeb PUSH1 0x2
0xed EXP
0xee SUB
0xef AND
0xf0 PUSH1 0x0
0xf2 SWAP1
0xf3 DUP2
0xf4 MSTORE
0xf5 PUSH1 0x1
0xf7 PUSH1 0x20
0xf9 MSTORE
0xfa PUSH1 0x40
0xfc DUP2
0xfd SHA3
0xfe SLOAD
0xff SWAP1
0x100 DUP2
0x101 EQ
0x102 DUP1
0x103 PUSH2 0x127
0x106 JUMPI
---
0xe2: JUMPDEST 
0xe3: V96 = 0x45
0xe6: V97 = CALLER
0xe7: V98 = 0x1
0xe9: V99 = 0xa0
0xeb: V100 = 0x2
0xed: V101 = EXP 0x2 0xa0
0xee: V102 = SUB 0x10000000000000000000000000000000000000000 0x1
0xef: V103 = AND 0xffffffffffffffffffffffffffffffffffffffff V97
0xf0: V104 = 0x0
0xf4: M[0x0] = V103
0xf5: V105 = 0x1
0xf7: V106 = 0x20
0xf9: M[0x20] = 0x1
0xfa: V107 = 0x40
0xfd: V108 = SHA3 0x0 0x40
0xfe: V109 = S[V108]
0x101: V110 = EQ V109 0x0
0x103: V111 = 0x127
0x106: JUMPI 0x127 V110
---
Entry stack: [V7]
Stack pops: 0
Stack additions: [0x45, V109, V110]
Exit stack: [V7, 0x45, V109, V110]

================================

Block 0x107
[0x107:0x126]
---
Predecessors: [0xe2]
Successors: [0x127]
---
0x107 POP
0x108 PUSH1 0x0
0x10a DUP2
0x10b DUP2
0x10c MSTORE
0x10d PUSH1 0x3
0x10f PUSH1 0x20
0x111 MSTORE
0x112 PUSH1 0x40
0x114 SWAP1
0x115 SHA3
0x116 SLOAD
0x117 ORIGIN
0x118 PUSH1 0x1
0x11a PUSH1 0xa0
0x11c PUSH1 0x2
0x11e EXP
0x11f SUB
0x120 SWAP1
0x121 DUP2
0x122 AND
0x123 SWAP2
0x124 AND
0x125 EQ
0x126 ISZERO
---
0x108: V112 = 0x0
0x10c: M[0x0] = V109
0x10d: V113 = 0x3
0x10f: V114 = 0x20
0x111: M[0x20] = 0x3
0x112: V115 = 0x40
0x115: V116 = SHA3 0x0 0x40
0x116: V117 = S[V116]
0x117: V118 = ORIGIN
0x118: V119 = 0x1
0x11a: V120 = 0xa0
0x11c: V121 = 0x2
0x11e: V122 = EXP 0x2 0xa0
0x11f: V123 = SUB 0x10000000000000000000000000000000000000000 0x1
0x122: V124 = AND 0xffffffffffffffffffffffffffffffffffffffff V118
0x124: V125 = AND V117 0xffffffffffffffffffffffffffffffffffffffff
0x125: V126 = EQ V125 V124
0x126: V127 = ISZERO V126
---
Entry stack: [V7, 0x45, V109, V110]
Stack pops: 2
Stack additions: [S1, V127]
Exit stack: [V7, 0x45, V109, V127]

================================

Block 0x127
[0x127:0x12c]
---
Predecessors: [0xe2, 0x107]
Successors: [0x12d, 0x2e0]
---
0x127 JUMPDEST
0x128 ISZERO
0x129 PUSH2 0x2e0
0x12c JUMPI
---
0x127: JUMPDEST 
0x128: V128 = ISZERO S0
0x129: V129 = 0x2e0
0x12c: JUMPI 0x2e0 V128
---
Entry stack: [V7, 0x45, V109, S0]
Stack pops: 1
Stack additions: []
Exit stack: [V7, 0x45, V109]

================================

Block 0x12d
[0x12d:0x130]
---
Predecessors: [0x127]
Successors: [0x3bc]
---
0x12d PUSH2 0x3bc
0x130 JUMP
---
0x12d: V130 = 0x3bc
0x130: JUMP 0x3bc
---
Entry stack: [V7, 0x45, V109]
Stack pops: 0
Stack additions: []
Exit stack: [V7, 0x45, V109]

================================

Block 0x131
[0x131:0x154]
---
Predecessors: [0x3a]
Successors: [0x8f]
---
0x131 JUMPDEST
0x132 PUSH2 0x168
0x135 PUSH1 0x4
0x137 CALLDATALOAD
0x138 PUSH1 0x1
0x13a PUSH1 0xa0
0x13c PUSH1 0x2
0x13e EXP
0x13f SUB
0x140 DUP2
0x141 AND
0x142 PUSH1 0x0
0x144 SWAP1
0x145 DUP2
0x146 MSTORE
0x147 PUSH1 0x1
0x149 PUSH1 0x20
0x14b MSTORE
0x14c PUSH1 0x40
0x14e SWAP1
0x14f SHA3
0x150 SLOAD
0x151 PUSH2 0x8f
0x154 JUMP
---
0x131: JUMPDEST 
0x132: V131 = 0x168
0x135: V132 = 0x4
0x137: V133 = CALLDATALOAD 0x4
0x138: V134 = 0x1
0x13a: V135 = 0xa0
0x13c: V136 = 0x2
0x13e: V137 = EXP 0x2 0xa0
0x13f: V138 = SUB 0x10000000000000000000000000000000000000000 0x1
0x141: V139 = AND V133 0xffffffffffffffffffffffffffffffffffffffff
0x142: V140 = 0x0
0x146: M[0x0] = V139
0x147: V141 = 0x1
0x149: V142 = 0x20
0x14b: M[0x20] = 0x1
0x14c: V143 = 0x40
0x14f: V144 = SHA3 0x0 0x40
0x150: V145 = S[V144]
0x151: V146 = 0x8f
0x154: JUMP 0x8f
---
Entry stack: [V7]
Stack pops: 0
Stack additions: [0x168, V133, V145]
Exit stack: [V7, 0x168, V133, V145]

================================

Block 0x155
[0x155:0x167]
---
Predecessors: [0x8f]
Successors: []
---
0x155 JUMPDEST
0x156 PUSH1 0x1
0x158 PUSH1 0xa0
0x15a PUSH1 0x2
0x15c EXP
0x15d SUB
0x15e AND
0x15f PUSH1 0x60
0x161 SWAP1
0x162 DUP2
0x163 MSTORE
0x164 PUSH1 0x20
0x166 SWAP1
0x167 RETURN
---
0x155: JUMPDEST 
0x156: V147 = 0x1
0x158: V148 = 0xa0
0x15a: V149 = 0x2
0x15c: V150 = EXP 0x2 0xa0
0x15d: V151 = SUB 0x10000000000000000000000000000000000000000 0x1
0x15e: V152 = AND 0xffffffffffffffffffffffffffffffffffffffff S0
0x15f: V153 = 0x60
0x163: M[0x60] = V152
0x164: V154 = 0x20
0x167: RETURN 0x60 0x20
---
Entry stack: [V7, S0]
Stack pops: 1
Stack additions: []
Exit stack: [V7]

================================

Block 0x168
[0x168:0x171]
---
Predecessors: [0x8f]
Successors: []
---
0x168 JUMPDEST
0x169 PUSH1 0x60
0x16b SWAP1
0x16c DUP2
0x16d MSTORE
0x16e PUSH1 0x20
0x170 SWAP1
0x171 RETURN
---
0x168: JUMPDEST 
0x169: V155 = 0x60
0x16d: M[0x60] = S0
0x16e: V156 = 0x20
0x171: RETURN 0x60 0x20
---
Entry stack: [V7, S0]
Stack pops: 1
Stack additions: []
Exit stack: [V7]

================================

Block 0x172
[0x172:0x173]
---
Predecessors: [0x47]
Successors: [0x45]
---
0x172 JUMPDEST
0x173 JUMP
---
0x172: JUMPDEST 
0x173: JUMP 0x45
---
Entry stack: [V7, 0x45]
Stack pops: 1
Stack additions: []
Exit stack: [V7]

================================

Block 0x174
[0x174:0x191]
---
Predecessors: [0xd8]
Successors: [0x192, 0x203]
---
0x174 JUMPDEST
0x175 CALLER
0x176 PUSH1 0x1
0x178 PUSH1 0xa0
0x17a PUSH1 0x2
0x17c EXP
0x17d SUB
0x17e AND
0x17f DUP2
0x180 MSTORE
0x181 PUSH1 0x1
0x183 PUSH1 0x20
0x185 MSTORE
0x186 PUSH1 0x40
0x188 DUP2
0x189 SHA3
0x18a SLOAD
0x18b SWAP1
0x18c DUP2
0x18d EQ
0x18e PUSH2 0x203
0x191 JUMPI
---
0x174: JUMPDEST 
0x175: V157 = CALLER
0x176: V158 = 0x1
0x178: V159 = 0xa0
0x17a: V160 = 0x2
0x17c: V161 = EXP 0x2 0xa0
0x17d: V162 = SUB 0x10000000000000000000000000000000000000000 0x1
0x17e: V163 = AND 0xffffffffffffffffffffffffffffffffffffffff V157
0x180: M[0x0] = V163
0x181: V164 = 0x1
0x183: V165 = 0x20
0x185: M[0x20] = 0x1
0x186: V166 = 0x40
0x189: V167 = SHA3 0x0 0x40
0x18a: V168 = S[V167]
0x18d: V169 = EQ V168 0x0
0x18e: V170 = 0x203
0x191: JUMPI 0x203 V169
---
Entry stack: [V7, 0x45, V62, 0x0]
Stack pops: 1
Stack additions: [V168]
Exit stack: [V7, 0x45, V62, V168]

================================

Block 0x192
[0x192:0x202]
---
Predecessors: [0x174]
Successors: [0x203]
---
0x192 PUSH1 0x0
0x194 DUP2
0x195 DUP2
0x196 MSTORE
0x197 PUSH1 0x2
0x199 PUSH1 0x20
0x19b SWAP1
0x19c DUP2
0x19d MSTORE
0x19e PUSH1 0x40
0x1a0 DUP1
0x1a1 DUP4
0x1a2 SHA3
0x1a3 DUP1
0x1a4 SLOAD
0x1a5 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x1ba NOT
0x1bb SWAP1
0x1bc DUP2
0x1bd AND
0x1be SWAP1
0x1bf SWAP2
0x1c0 SSTORE
0x1c1 PUSH1 0x3
0x1c3 DUP4
0x1c4 MSTORE
0x1c5 SWAP3
0x1c6 SHA3
0x1c7 DUP1
0x1c8 SLOAD
0x1c9 SWAP3
0x1ca SWAP1
0x1cb SWAP3
0x1cc AND
0x1cd SWAP1
0x1ce SWAP2
0x1cf SSTORE
0x1d0 PUSH1 0x60
0x1d2 DUP3
0x1d3 DUP2
0x1d4 MSTORE
0x1d5 CALLER
0x1d6 PUSH1 0x1
0x1d8 PUSH1 0xa0
0x1da PUSH1 0x2
0x1dc EXP
0x1dd SUB
0x1de AND
0x1df SWAP2
0x1e0 PUSH32 0x35fb57fcc94dfd171a0cd0b5eb98391005d09923c1ddceac275cde8fa26df78f
0x201 SWAP2
0x202 LOG2
---
0x192: V171 = 0x0
0x196: M[0x0] = V168
0x197: V172 = 0x2
0x199: V173 = 0x20
0x19d: M[0x20] = 0x2
0x19e: V174 = 0x40
0x1a2: V175 = SHA3 0x0 0x40
0x1a4: V176 = S[V175]
0x1a5: V177 = 0xffffffffffffffffffffffffffffffffffffffff
0x1ba: V178 = NOT 0xffffffffffffffffffffffffffffffffffffffff
0x1bd: V179 = AND 0xffffffffffffffffffffffff0000000000000000000000000000000000000000 V176
0x1c0: S[V175] = V179
0x1c1: V180 = 0x3
0x1c4: M[0x20] = 0x3
0x1c6: V181 = SHA3 0x0 0x40
0x1c8: V182 = S[V181]
0x1cc: V183 = AND V182 0xffffffffffffffffffffffff0000000000000000000000000000000000000000
0x1cf: S[V181] = V183
0x1d0: V184 = 0x60
0x1d4: M[0x60] = V168
0x1d5: V185 = CALLER
0x1d6: V186 = 0x1
0x1d8: V187 = 0xa0
0x1da: V188 = 0x2
0x1dc: V189 = EXP 0x2 0xa0
0x1dd: V190 = SUB 0x10000000000000000000000000000000000000000 0x1
0x1de: V191 = AND 0xffffffffffffffffffffffffffffffffffffffff V185
0x1e0: V192 = 0x35fb57fcc94dfd171a0cd0b5eb98391005d09923c1ddceac275cde8fa26df78f
0x202: LOG 0x60 0x20 0x35fb57fcc94dfd171a0cd0b5eb98391005d09923c1ddceac275cde8fa26df78f V191
---
Entry stack: [V7, 0x45, V62, V168]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V7, 0x45, V62, V168]

================================

Block 0x203
[0x203:0x2db]
---
Predecessors: [0x174, 0x192]
Successors: [0x2dc]
---
0x203 JUMPDEST
0x204 DUP2
0x205 PUSH1 0x1
0x207 PUSH1 0x0
0x209 POP
0x20a PUSH1 0x0
0x20c CALLER
0x20d PUSH1 0x1
0x20f PUSH1 0xa0
0x211 PUSH1 0x2
0x213 EXP
0x214 SUB
0x215 AND
0x216 DUP2
0x217 MSTORE
0x218 PUSH1 0x20
0x21a ADD
0x21b SWAP1
0x21c DUP2
0x21d MSTORE
0x21e PUSH1 0x20
0x220 ADD
0x221 PUSH1 0x0
0x223 SHA3
0x224 PUSH1 0x0
0x226 POP
0x227 DUP2
0x228 SWAP1
0x229 SSTORE
0x22a POP
0x22b CALLER
0x22c PUSH1 0x2
0x22e PUSH1 0x0
0x230 POP
0x231 PUSH1 0x0
0x233 DUP5
0x234 PUSH1 0x0
0x236 NOT
0x237 AND
0x238 DUP2
0x239 MSTORE
0x23a PUSH1 0x20
0x23c ADD
0x23d SWAP1
0x23e DUP2
0x23f MSTORE
0x240 PUSH1 0x20
0x242 ADD
0x243 PUSH1 0x0
0x245 SHA3
0x246 PUSH1 0x0
0x248 PUSH2 0x100
0x24b EXP
0x24c DUP2
0x24d SLOAD
0x24e DUP2
0x24f PUSH1 0x1
0x251 PUSH1 0xa0
0x253 PUSH1 0x2
0x255 EXP
0x256 SUB
0x257 MUL
0x258 NOT
0x259 AND
0x25a SWAP1
0x25b DUP4
0x25c MUL
0x25d OR
0x25e SWAP1
0x25f SSTORE
0x260 POP
0x261 ORIGIN
0x262 PUSH1 0x3
0x264 PUSH1 0x0
0x266 POP
0x267 PUSH1 0x0
0x269 DUP5
0x26a PUSH1 0x0
0x26c NOT
0x26d AND
0x26e DUP2
0x26f MSTORE
0x270 PUSH1 0x20
0x272 ADD
0x273 SWAP1
0x274 DUP2
0x275 MSTORE
0x276 PUSH1 0x20
0x278 ADD
0x279 PUSH1 0x0
0x27b SHA3
0x27c PUSH1 0x0
0x27e PUSH2 0x100
0x281 EXP
0x282 DUP2
0x283 SLOAD
0x284 DUP2
0x285 PUSH1 0x1
0x287 PUSH1 0xa0
0x289 PUSH1 0x2
0x28b EXP
0x28c SUB
0x28d MUL
0x28e NOT
0x28f AND
0x290 SWAP1
0x291 DUP4
0x292 MUL
0x293 OR
0x294 SWAP1
0x295 SSTORE
0x296 POP
0x297 CALLER
0x298 PUSH1 0x1
0x29a PUSH1 0xa0
0x29c PUSH1 0x2
0x29e EXP
0x29f SUB
0x2a0 AND
0x2a1 PUSH32 0x35b95fef243be6acd4535eb4b918ab1ef20a4c3eb373ff569d827c1660e1bcb0
0x2c2 DUP4
0x2c3 PUSH1 0x40
0x2c5 MLOAD
0x2c6 DUP1
0x2c7 DUP3
0x2c8 PUSH1 0x0
0x2ca NOT
0x2cb AND
0x2cc DUP2
0x2cd MSTORE
0x2ce PUSH1 0x20
0x2d0 ADD
0x2d1 SWAP2
0x2d2 POP
0x2d3 POP
0x2d4 PUSH1 0x40
0x2d6 MLOAD
0x2d7 DUP1
0x2d8 SWAP2
0x2d9 SUB
0x2da SWAP1
0x2db LOG2
---
0x203: JUMPDEST 
0x205: V193 = 0x1
0x207: V194 = 0x0
0x20a: V195 = 0x0
0x20c: V196 = CALLER
0x20d: V197 = 0x1
0x20f: V198 = 0xa0
0x211: V199 = 0x2
0x213: V200 = EXP 0x2 0xa0
0x214: V201 = SUB 0x10000000000000000000000000000000000000000 0x1
0x215: V202 = AND 0xffffffffffffffffffffffffffffffffffffffff V196
0x217: M[0x0] = V202
0x218: V203 = 0x20
0x21a: V204 = ADD 0x20 0x0
0x21d: M[0x20] = 0x1
0x21e: V205 = 0x20
0x220: V206 = ADD 0x20 0x20
0x221: V207 = 0x0
0x223: V208 = SHA3 0x0 0x40
0x224: V209 = 0x0
0x229: S[V208] = V62
0x22b: V210 = CALLER
0x22c: V211 = 0x2
0x22e: V212 = 0x0
0x231: V213 = 0x0
0x234: V214 = 0x0
0x236: V215 = NOT 0x0
0x237: V216 = AND 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff V62
0x239: M[0x0] = V216
0x23a: V217 = 0x20
0x23c: V218 = ADD 0x20 0x0
0x23f: M[0x20] = 0x2
0x240: V219 = 0x20
0x242: V220 = ADD 0x20 0x20
0x243: V221 = 0x0
0x245: V222 = SHA3 0x0 0x40
0x246: V223 = 0x0
0x248: V224 = 0x100
0x24b: V225 = EXP 0x100 0x0
0x24d: V226 = S[V222]
0x24f: V227 = 0x1
0x251: V228 = 0xa0
0x253: V229 = 0x2
0x255: V230 = EXP 0x2 0xa0
0x256: V231 = SUB 0x10000000000000000000000000000000000000000 0x1
0x257: V232 = MUL 0xffffffffffffffffffffffffffffffffffffffff 0x1
0x258: V233 = NOT 0xffffffffffffffffffffffffffffffffffffffff
0x259: V234 = AND 0xffffffffffffffffffffffff0000000000000000000000000000000000000000 V226
0x25c: V235 = MUL V210 0x1
0x25d: V236 = OR V235 V234
0x25f: S[V222] = V236
0x261: V237 = ORIGIN
0x262: V238 = 0x3
0x264: V239 = 0x0
0x267: V240 = 0x0
0x26a: V241 = 0x0
0x26c: V242 = NOT 0x0
0x26d: V243 = AND 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff V62
0x26f: M[0x0] = V243
0x270: V244 = 0x20
0x272: V245 = ADD 0x20 0x0
0x275: M[0x20] = 0x3
0x276: V246 = 0x20
0x278: V247 = ADD 0x20 0x20
0x279: V248 = 0x0
0x27b: V249 = SHA3 0x0 0x40
0x27c: V250 = 0x0
0x27e: V251 = 0x100
0x281: V252 = EXP 0x100 0x0
0x283: V253 = S[V249]
0x285: V254 = 0x1
0x287: V255 = 0xa0
0x289: V256 = 0x2
0x28b: V257 = EXP 0x2 0xa0
0x28c: V258 = SUB 0x10000000000000000000000000000000000000000 0x1
0x28d: V259 = MUL 0xffffffffffffffffffffffffffffffffffffffff 0x1
0x28e: V260 = NOT 0xffffffffffffffffffffffffffffffffffffffff
0x28f: V261 = AND 0xffffffffffffffffffffffff0000000000000000000000000000000000000000 V253
0x292: V262 = MUL V237 0x1
0x293: V263 = OR V262 V261
0x295: S[V249] = V263
0x297: V264 = CALLER
0x298: V265 = 0x1
0x29a: V266 = 0xa0
0x29c: V267 = 0x2
0x29e: V268 = EXP 0x2 0xa0
0x29f: V269 = SUB 0x10000000000000000000000000000000000000000 0x1
0x2a0: V270 = AND 0xffffffffffffffffffffffffffffffffffffffff V264
0x2a1: V271 = 0x35b95fef243be6acd4535eb4b918ab1ef20a4c3eb373ff569d827c1660e1bcb0
0x2c3: V272 = 0x40
0x2c5: V273 = M[0x40]
0x2c8: V274 = 0x0
0x2ca: V275 = NOT 0x0
0x2cb: V276 = AND 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff V62
0x2cd: M[V273] = V276
0x2ce: V277 = 0x20
0x2d0: V278 = ADD 0x20 V273
0x2d4: V279 = 0x40
0x2d6: V280 = M[0x40]
0x2d9: V281 = SUB V278 V280
0x2db: LOG V280 V281 0x35b95fef243be6acd4535eb4b918ab1ef20a4c3eb373ff569d827c1660e1bcb0 V270
---
Entry stack: [V7, 0x45, V62, V168]
Stack pops: 2
Stack additions: [S1, S0]
Exit stack: [V7, 0x45, V62, V168]

================================

Block 0x2dc
[0x2dc:0x2df]
---
Predecessors: [0xde, 0x203]
Successors: [0x45]
---
0x2dc JUMPDEST
0x2dd POP
0x2de POP
0x2df JUMP
---
0x2dc: JUMPDEST 
0x2df: JUMP 0x45
---
Entry stack: [V7, 0x45, V62, S0]
Stack pops: 3
Stack additions: []
Exit stack: [V7]

================================

Block 0x2e0
[0x2e0:0x3bb]
---
Predecessors: [0x127]
Successors: [0x3bc]
---
0x2e0 JUMPDEST
0x2e1 PUSH1 0x0
0x2e3 PUSH1 0x1
0x2e5 PUSH1 0x0
0x2e7 POP
0x2e8 PUSH1 0x0
0x2ea CALLER
0x2eb PUSH1 0x1
0x2ed PUSH1 0xa0
0x2ef PUSH1 0x2
0x2f1 EXP
0x2f2 SUB
0x2f3 AND
0x2f4 DUP2
0x2f5 MSTORE
0x2f6 PUSH1 0x20
0x2f8 ADD
0x2f9 SWAP1
0x2fa DUP2
0x2fb MSTORE
0x2fc PUSH1 0x20
0x2fe ADD
0x2ff PUSH1 0x0
0x301 SHA3
0x302 PUSH1 0x0
0x304 POP
0x305 DUP2
0x306 SWAP1
0x307 SSTORE
0x308 POP
0x309 PUSH1 0x0
0x30b PUSH1 0x2
0x30d PUSH1 0x0
0x30f POP
0x310 PUSH1 0x0
0x312 DUP4
0x313 PUSH1 0x0
0x315 NOT
0x316 AND
0x317 DUP2
0x318 MSTORE
0x319 PUSH1 0x20
0x31b ADD
0x31c SWAP1
0x31d DUP2
0x31e MSTORE
0x31f PUSH1 0x20
0x321 ADD
0x322 PUSH1 0x0
0x324 SHA3
0x325 PUSH1 0x0
0x327 PUSH2 0x100
0x32a EXP
0x32b DUP2
0x32c SLOAD
0x32d DUP2
0x32e PUSH1 0x1
0x330 PUSH1 0xa0
0x332 PUSH1 0x2
0x334 EXP
0x335 SUB
0x336 MUL
0x337 NOT
0x338 AND
0x339 SWAP1
0x33a DUP4
0x33b MUL
0x33c OR
0x33d SWAP1
0x33e SSTORE
0x33f POP
0x340 PUSH1 0x0
0x342 PUSH1 0x3
0x344 PUSH1 0x0
0x346 POP
0x347 PUSH1 0x0
0x349 DUP4
0x34a PUSH1 0x0
0x34c NOT
0x34d AND
0x34e DUP2
0x34f MSTORE
0x350 PUSH1 0x20
0x352 ADD
0x353 SWAP1
0x354 DUP2
0x355 MSTORE
0x356 PUSH1 0x20
0x358 ADD
0x359 PUSH1 0x0
0x35b SHA3
0x35c PUSH1 0x0
0x35e PUSH2 0x100
0x361 EXP
0x362 DUP2
0x363 SLOAD
0x364 DUP2
0x365 PUSH1 0x1
0x367 PUSH1 0xa0
0x369 PUSH1 0x2
0x36b EXP
0x36c SUB
0x36d MUL
0x36e NOT
0x36f AND
0x370 SWAP1
0x371 DUP4
0x372 MUL
0x373 OR
0x374 SWAP1
0x375 SSTORE
0x376 POP
0x377 CALLER
0x378 PUSH1 0x1
0x37a PUSH1 0xa0
0x37c PUSH1 0x2
0x37e EXP
0x37f SUB
0x380 AND
0x381 PUSH32 0x35fb57fcc94dfd171a0cd0b5eb98391005d09923c1ddceac275cde8fa26df78f
0x3a2 DUP3
0x3a3 PUSH1 0x40
0x3a5 MLOAD
0x3a6 DUP1
0x3a7 DUP3
0x3a8 PUSH1 0x0
0x3aa NOT
0x3ab AND
0x3ac DUP2
0x3ad MSTORE
0x3ae PUSH1 0x20
0x3b0 ADD
0x3b1 SWAP2
0x3b2 POP
0x3b3 POP
0x3b4 PUSH1 0x40
0x3b6 MLOAD
0x3b7 DUP1
0x3b8 SWAP2
0x3b9 SUB
0x3ba SWAP1
0x3bb LOG2
---
0x2e0: JUMPDEST 
0x2e1: V282 = 0x0
0x2e3: V283 = 0x1
0x2e5: V284 = 0x0
0x2e8: V285 = 0x0
0x2ea: V286 = CALLER
0x2eb: V287 = 0x1
0x2ed: V288 = 0xa0
0x2ef: V289 = 0x2
0x2f1: V290 = EXP 0x2 0xa0
0x2f2: V291 = SUB 0x10000000000000000000000000000000000000000 0x1
0x2f3: V292 = AND 0xffffffffffffffffffffffffffffffffffffffff V286
0x2f5: M[0x0] = V292
0x2f6: V293 = 0x20
0x2f8: V294 = ADD 0x20 0x0
0x2fb: M[0x20] = 0x1
0x2fc: V295 = 0x20
0x2fe: V296 = ADD 0x20 0x20
0x2ff: V297 = 0x0
0x301: V298 = SHA3 0x0 0x40
0x302: V299 = 0x0
0x307: S[V298] = 0x0
0x309: V300 = 0x0
0x30b: V301 = 0x2
0x30d: V302 = 0x0
0x310: V303 = 0x0
0x313: V304 = 0x0
0x315: V305 = NOT 0x0
0x316: V306 = AND 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff V109
0x318: M[0x0] = V306
0x319: V307 = 0x20
0x31b: V308 = ADD 0x20 0x0
0x31e: M[0x20] = 0x2
0x31f: V309 = 0x20
0x321: V310 = ADD 0x20 0x20
0x322: V311 = 0x0
0x324: V312 = SHA3 0x0 0x40
0x325: V313 = 0x0
0x327: V314 = 0x100
0x32a: V315 = EXP 0x100 0x0
0x32c: V316 = S[V312]
0x32e: V317 = 0x1
0x330: V318 = 0xa0
0x332: V319 = 0x2
0x334: V320 = EXP 0x2 0xa0
0x335: V321 = SUB 0x10000000000000000000000000000000000000000 0x1
0x336: V322 = MUL 0xffffffffffffffffffffffffffffffffffffffff 0x1
0x337: V323 = NOT 0xffffffffffffffffffffffffffffffffffffffff
0x338: V324 = AND 0xffffffffffffffffffffffff0000000000000000000000000000000000000000 V316
0x33b: V325 = MUL 0x0 0x1
0x33c: V326 = OR 0x0 V324
0x33e: S[V312] = V326
0x340: V327 = 0x0
0x342: V328 = 0x3
0x344: V329 = 0x0
0x347: V330 = 0x0
0x34a: V331 = 0x0
0x34c: V332 = NOT 0x0
0x34d: V333 = AND 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff V109
0x34f: M[0x0] = V333
0x350: V334 = 0x20
0x352: V335 = ADD 0x20 0x0
0x355: M[0x20] = 0x3
0x356: V336 = 0x20
0x358: V337 = ADD 0x20 0x20
0x359: V338 = 0x0
0x35b: V339 = SHA3 0x0 0x40
0x35c: V340 = 0x0
0x35e: V341 = 0x100
0x361: V342 = EXP 0x100 0x0
0x363: V343 = S[V339]
0x365: V344 = 0x1
0x367: V345 = 0xa0
0x369: V346 = 0x2
0x36b: V347 = EXP 0x2 0xa0
0x36c: V348 = SUB 0x10000000000000000000000000000000000000000 0x1
0x36d: V349 = MUL 0xffffffffffffffffffffffffffffffffffffffff 0x1
0x36e: V350 = NOT 0xffffffffffffffffffffffffffffffffffffffff
0x36f: V351 = AND 0xffffffffffffffffffffffff0000000000000000000000000000000000000000 V343
0x372: V352 = MUL 0x0 0x1
0x373: V353 = OR 0x0 V351
0x375: S[V339] = V353
0x377: V354 = CALLER
0x378: V355 = 0x1
0x37a: V356 = 0xa0
0x37c: V357 = 0x2
0x37e: V358 = EXP 0x2 0xa0
0x37f: V359 = SUB 0x10000000000000000000000000000000000000000 0x1
0x380: V360 = AND 0xffffffffffffffffffffffffffffffffffffffff V354
0x381: V361 = 0x35fb57fcc94dfd171a0cd0b5eb98391005d09923c1ddceac275cde8fa26df78f
0x3a3: V362 = 0x40
0x3a5: V363 = M[0x40]
0x3a8: V364 = 0x0
0x3aa: V365 = NOT 0x0
0x3ab: V366 = AND 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff V109
0x3ad: M[V363] = V366
0x3ae: V367 = 0x20
0x3b0: V368 = ADD 0x20 V363
0x3b4: V369 = 0x40
0x3b6: V370 = M[0x40]
0x3b9: V371 = SUB V368 V370
0x3bb: LOG V370 V371 0x35fb57fcc94dfd171a0cd0b5eb98391005d09923c1ddceac275cde8fa26df78f V360
---
Entry stack: [V7, 0x45, V109]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V7, 0x45, V109]

================================

Block 0x3bc
[0x3bc:0x3be]
---
Predecessors: [0x12d, 0x2e0]
Successors: [0x45]
---
0x3bc JUMPDEST
0x3bd POP
0x3be JUMP
---
0x3bc: JUMPDEST 
0x3be: JUMP 0x45
---
Entry stack: [V7, 0x45, V109]
Stack pops: 2
Stack additions: []
Exit stack: [V7]

================================

Function 0:
Public function signature: 0x41c0e1b5
Entry block: 0x47
Exit block: 0x45
Body: 0x45, 0x47, 0x63, 0x172

Function 1:
Public function signature: 0xbb34534c
Entry block: 0x70
Exit block: 0x155
Body: 0x70, 0x155

Function 2:
Public function signature: 0xe1fa8e84
Entry block: 0x94
Exit block: 0x45
Body: 0x45, 0x94, 0xbc, 0xd8, 0xde, 0x174, 0x192, 0x203, 0x2dc

Function 3:
Public function signature: 0xe79a198f
Entry block: 0xe2
Exit block: 0x45
Body: 0x45, 0xe2, 0x107, 0x127, 0x12d, 0x2e0, 0x3bc

Function 4:
Public function signature: 0xf5c57382
Entry block: 0x131
Exit block: 0x168
Body: 0x131, 0x168

Function 5:
Public fallback function
Entry block: 0x45
Exit block: 0x45
Body: 0x45

