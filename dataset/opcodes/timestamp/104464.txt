args
Namespace(bytecode=False, config=None, config_file='/home/hm/project/vandal/bin/config.ini', disassembly=False, dominators=False, graph=None, infile=<_io.TextIOWrapper name='/home/hm/project/vandal/testALL/contractByteALL/contract21/5/104464.txt' mode='r' encoding='UTF-8'>, no_out=False, opcodes=[], outfile=<_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>, prolix=False, tsv=None, verbose=False, version=False)
30
None
None
Block 0x0
[0x0:0xc]
---
Predecessors: []
Successors: [0xd, 0x4c]
---
0x0 PUSH1 0x60
0x2 PUSH1 0x40
0x4 MSTORE
0x5 PUSH1 0x4
0x7 CALLDATASIZE
0x8 LT
0x9 PUSH2 0x4c
0xc JUMPI
---
0x0: V0 = 0x60
0x2: V1 = 0x40
0x4: M[0x40] = 0x60
0x5: V2 = 0x4
0x7: V3 = CALLDATASIZE
0x8: V4 = LT V3 0x4
0x9: V5 = 0x4c
0xc: JUMPI 0x4c V4
---
Entry stack: []
Stack pops: 0
Stack additions: []
Exit stack: []

================================

Block 0xd
[0xd:0x40]
---
Predecessors: [0x0]
Successors: [0x41, 0x51]
---
0xd PUSH1 0x0
0xf CALLDATALOAD
0x10 PUSH29 0x100000000000000000000000000000000000000000000000000000000
0x2e SWAP1
0x2f DIV
0x30 PUSH4 0xffffffff
0x35 AND
0x36 DUP1
0x37 PUSH4 0xc8a76494
0x3c EQ
0x3d PUSH2 0x51
0x40 JUMPI
---
0xd: V6 = 0x0
0xf: V7 = CALLDATALOAD 0x0
0x10: V8 = 0x100000000000000000000000000000000000000000000000000000000
0x2f: V9 = DIV V7 0x100000000000000000000000000000000000000000000000000000000
0x30: V10 = 0xffffffff
0x35: V11 = AND 0xffffffff V9
0x37: V12 = 0xc8a76494
0x3c: V13 = EQ 0xc8a76494 V11
0x3d: V14 = 0x51
0x40: JUMPI 0x51 V13
---
Entry stack: []
Stack pops: 0
Stack additions: [V11]
Exit stack: [V11]

================================

Block 0x41
[0x41:0x4b]
---
Predecessors: [0xd]
Successors: [0x4c, 0x5b]
---
0x41 DUP1
0x42 PUSH4 0xd30895e4
0x47 EQ
0x48 PUSH2 0x5b
0x4b JUMPI
---
0x42: V15 = 0xd30895e4
0x47: V16 = EQ 0xd30895e4 V11
0x48: V17 = 0x5b
0x4b: JUMPI 0x5b V16
---
Entry stack: [V11]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V11]

================================

Block 0x4c
[0x4c:0x50]
---
Predecessors: [0x0, 0x41]
Successors: []
---
0x4c JUMPDEST
0x4d PUSH1 0x0
0x4f DUP1
0x50 REVERT
---
0x4c: JUMPDEST 
0x4d: V18 = 0x0
0x50: REVERT 0x0 0x0
---
Entry stack: [V11]
Stack pops: 0
Stack additions: []
Exit stack: [V11]

================================

Block 0x51
[0x51:0x58]
---
Predecessors: [0xd]
Successors: [0xb0]
---
0x51 JUMPDEST
0x52 PUSH2 0x59
0x55 PUSH2 0xb0
0x58 JUMP
---
0x51: JUMPDEST 
0x52: V19 = 0x59
0x55: V20 = 0xb0
0x58: JUMP 0xb0
---
Entry stack: [V11]
Stack pops: 0
Stack additions: [0x59]
Exit stack: [V11, 0x59]

================================

Block 0x59
[0x59:0x5a]
---
Predecessors: [0x31a]
Successors: []
---
0x59 JUMPDEST
0x5a STOP
---
0x59: JUMPDEST 
0x5a: STOP 
---
Entry stack: [V11]
Stack pops: 0
Stack additions: []
Exit stack: [V11]

================================

Block 0x5b
[0x5b:0x61]
---
Predecessors: [0x41]
Successors: [0x62, 0x66]
---
0x5b JUMPDEST
0x5c CALLVALUE
0x5d ISZERO
0x5e PUSH2 0x66
0x61 JUMPI
---
0x5b: JUMPDEST 
0x5c: V21 = CALLVALUE
0x5d: V22 = ISZERO V21
0x5e: V23 = 0x66
0x61: JUMPI 0x66 V22
---
Entry stack: [V11]
Stack pops: 0
Stack additions: []
Exit stack: [V11]

================================

Block 0x62
[0x62:0x65]
---
Predecessors: [0x5b]
Successors: []
---
0x62 PUSH1 0x0
0x64 DUP1
0x65 REVERT
---
0x62: V24 = 0x0
0x65: REVERT 0x0 0x0
---
Entry stack: [V11]
Stack pops: 0
Stack additions: []
Exit stack: [V11]

================================

Block 0x66
[0x66:0x6d]
---
Predecessors: [0x5b]
Successors: [0x320]
---
0x66 JUMPDEST
0x67 PUSH2 0x6e
0x6a PUSH2 0x320
0x6d JUMP
---
0x66: JUMPDEST 
0x67: V25 = 0x6e
0x6a: V26 = 0x320
0x6d: JUMP 0x320
---
Entry stack: [V11]
Stack pops: 0
Stack additions: [0x6e]
Exit stack: [V11, 0x6e]

================================

Block 0x6e
[0x6e:0xaf]
---
Predecessors: [0x320]
Successors: []
---
0x6e JUMPDEST
0x6f PUSH1 0x40
0x71 MLOAD
0x72 DUP1
0x73 DUP3
0x74 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x89 AND
0x8a PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x9f AND
0xa0 DUP2
0xa1 MSTORE
0xa2 PUSH1 0x20
0xa4 ADD
0xa5 SWAP2
0xa6 POP
0xa7 POP
0xa8 PUSH1 0x40
0xaa MLOAD
0xab DUP1
0xac SWAP2
0xad SUB
0xae SWAP1
0xaf RETURN
---
0x6e: JUMPDEST 
0x6f: V27 = 0x40
0x71: V28 = M[0x40]
0x74: V29 = 0xffffffffffffffffffffffffffffffffffffffff
0x89: V30 = AND 0xffffffffffffffffffffffffffffffffffffffff V161
0x8a: V31 = 0xffffffffffffffffffffffffffffffffffffffff
0x9f: V32 = AND 0xffffffffffffffffffffffffffffffffffffffff V30
0xa1: M[V28] = V32
0xa2: V33 = 0x20
0xa4: V34 = ADD 0x20 V28
0xa8: V35 = 0x40
0xaa: V36 = M[0x40]
0xad: V37 = SUB V34 V36
0xaf: RETURN V36 V37
---
Entry stack: [V11, 0x6e, V161]
Stack pops: 1
Stack additions: []
Exit stack: [V11, 0x6e]

================================

Block 0xb0
[0xb0:0xc7]
---
Predecessors: [0x51]
Successors: [0xc8, 0xcc]
---
0xb0 JUMPDEST
0xb1 PUSH1 0x0
0xb3 DUP1
0xb4 PUSH1 0x0
0xb6 DUP1
0xb7 CALLER
0xb8 SWAP4
0xb9 POP
0xba PUSH5 0xe8d4a51000
0xc0 CALLVALUE
0xc1 EQ
0xc2 ISZERO
0xc3 ISZERO
0xc4 PUSH2 0xcc
0xc7 JUMPI
---
0xb0: JUMPDEST 
0xb1: V38 = 0x0
0xb4: V39 = 0x0
0xb7: V40 = CALLER
0xba: V41 = 0xe8d4a51000
0xc0: V42 = CALLVALUE
0xc1: V43 = EQ V42 0xe8d4a51000
0xc2: V44 = ISZERO V43
0xc3: V45 = ISZERO V44
0xc4: V46 = 0xcc
0xc7: JUMPI 0xcc V45
---
Entry stack: [V11, 0x59]
Stack pops: 0
Stack additions: [V40, 0x0, 0x0, 0x0]
Exit stack: [V11, 0x59, V40, 0x0, 0x0, 0x0]

================================

Block 0xc8
[0xc8:0xcb]
---
Predecessors: [0xb0]
Successors: []
---
0xc8 PUSH1 0x0
0xca DUP1
0xcb REVERT
---
0xc8: V47 = 0x0
0xcb: REVERT 0x0 0x0
---
Entry stack: [V11, 0x59, V40, 0x0, 0x0, 0x0]
Stack pops: 0
Stack additions: []
Exit stack: [V11, 0x59, V40, 0x0, 0x0, 0x0]

================================

Block 0xcc
[0xcc:0x18d]
---
Predecessors: [0xb0]
Successors: [0x18e, 0x1d2]
---
0xcc JUMPDEST
0xcd PUSH32 0x6b8fe0f067804a78a12efa88b8428446c8d8a703d5604dffc63ac27fcbdcfd0d
0xee DUP5
0xef CALLVALUE
0xf0 PUSH1 0x40
0xf2 MLOAD
0xf3 DUP1
0xf4 DUP4
0xf5 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x10a AND
0x10b PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x120 AND
0x121 DUP2
0x122 MSTORE
0x123 PUSH1 0x20
0x125 ADD
0x126 DUP3
0x127 DUP2
0x128 MSTORE
0x129 PUSH1 0x20
0x12b ADD
0x12c SWAP3
0x12d POP
0x12e POP
0x12f POP
0x130 PUSH1 0x40
0x132 MLOAD
0x133 DUP1
0x134 SWAP2
0x135 SUB
0x136 SWAP1
0x137 LOG1
0x138 PUSH1 0x0
0x13a PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x14f AND
0x150 PUSH1 0x0
0x152 DUP1
0x153 SWAP1
0x154 SLOAD
0x155 SWAP1
0x156 PUSH2 0x100
0x159 EXP
0x15a SWAP1
0x15b DIV
0x15c PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x171 AND
0x172 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x187 AND
0x188 EQ
0x189 ISZERO
0x18a PUSH2 0x1d2
0x18d JUMPI
---
0xcc: JUMPDEST 
0xcd: V48 = 0x6b8fe0f067804a78a12efa88b8428446c8d8a703d5604dffc63ac27fcbdcfd0d
0xef: V49 = CALLVALUE
0xf0: V50 = 0x40
0xf2: V51 = M[0x40]
0xf5: V52 = 0xffffffffffffffffffffffffffffffffffffffff
0x10a: V53 = AND 0xffffffffffffffffffffffffffffffffffffffff V40
0x10b: V54 = 0xffffffffffffffffffffffffffffffffffffffff
0x120: V55 = AND 0xffffffffffffffffffffffffffffffffffffffff V53
0x122: M[V51] = V55
0x123: V56 = 0x20
0x125: V57 = ADD 0x20 V51
0x128: M[V57] = V49
0x129: V58 = 0x20
0x12b: V59 = ADD 0x20 V57
0x130: V60 = 0x40
0x132: V61 = M[0x40]
0x135: V62 = SUB V59 V61
0x137: LOG V61 V62 0x6b8fe0f067804a78a12efa88b8428446c8d8a703d5604dffc63ac27fcbdcfd0d
0x138: V63 = 0x0
0x13a: V64 = 0xffffffffffffffffffffffffffffffffffffffff
0x14f: V65 = AND 0xffffffffffffffffffffffffffffffffffffffff 0x0
0x150: V66 = 0x0
0x154: V67 = S[0x0]
0x156: V68 = 0x100
0x159: V69 = EXP 0x100 0x0
0x15b: V70 = DIV V67 0x1
0x15c: V71 = 0xffffffffffffffffffffffffffffffffffffffff
0x171: V72 = AND 0xffffffffffffffffffffffffffffffffffffffff V70
0x172: V73 = 0xffffffffffffffffffffffffffffffffffffffff
0x187: V74 = AND 0xffffffffffffffffffffffffffffffffffffffff V72
0x188: V75 = EQ V74 0x0
0x189: V76 = ISZERO V75
0x18a: V77 = 0x1d2
0x18d: JUMPI 0x1d2 V76
---
Entry stack: [V11, 0x59, V40, 0x0, 0x0, 0x0]
Stack pops: 4
Stack additions: [S3, S2, S1, S0]
Exit stack: [V11, 0x59, V40, 0x0, 0x0, 0x0]

================================

Block 0x18e
[0x18e:0x1d1]
---
Predecessors: [0xcc]
Successors: [0x31a]
---
0x18e DUP4
0x18f PUSH1 0x0
0x191 DUP1
0x192 PUSH2 0x100
0x195 EXP
0x196 DUP2
0x197 SLOAD
0x198 DUP2
0x199 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x1ae MUL
0x1af NOT
0x1b0 AND
0x1b1 SWAP1
0x1b2 DUP4
0x1b3 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x1c8 AND
0x1c9 MUL
0x1ca OR
0x1cb SWAP1
0x1cc SSTORE
0x1cd POP
0x1ce PUSH2 0x31a
0x1d1 JUMP
---
0x18f: V78 = 0x0
0x192: V79 = 0x100
0x195: V80 = EXP 0x100 0x0
0x197: V81 = S[0x0]
0x199: V82 = 0xffffffffffffffffffffffffffffffffffffffff
0x1ae: V83 = MUL 0xffffffffffffffffffffffffffffffffffffffff 0x1
0x1af: V84 = NOT 0xffffffffffffffffffffffffffffffffffffffff
0x1b0: V85 = AND 0xffffffffffffffffffffffff0000000000000000000000000000000000000000 V81
0x1b3: V86 = 0xffffffffffffffffffffffffffffffffffffffff
0x1c8: V87 = AND 0xffffffffffffffffffffffffffffffffffffffff V40
0x1c9: V88 = MUL V87 0x1
0x1ca: V89 = OR V88 V85
0x1cc: S[0x0] = V89
0x1ce: V90 = 0x31a
0x1d1: JUMP 0x31a
---
Entry stack: [V11, 0x59, V40, 0x0, 0x0, 0x0]
Stack pops: 4
Stack additions: [S3, S2, S1, S0]
Exit stack: [V11, 0x59, V40, 0x0, 0x0, 0x0]

================================

Block 0x1d2
[0x1d2:0x205]
---
Predecessors: [0xcc]
Successors: [0x206, 0x207]
---
0x1d2 JUMPDEST
0x1d3 TIMESTAMP
0x1d4 SWAP3
0x1d5 POP
0x1d6 PUSH1 0x0
0x1d8 DUP1
0x1d9 SWAP1
0x1da SLOAD
0x1db SWAP1
0x1dc PUSH2 0x100
0x1df EXP
0x1e0 SWAP1
0x1e1 DIV
0x1e2 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x1f7 AND
0x1f8 SWAP2
0x1f9 POP
0x1fa DUP3
0x1fb PUSH1 0x2
0x1fd DUP1
0x1fe DUP6
0x1ff DUP2
0x200 ISZERO
0x201 ISZERO
0x202 PUSH2 0x207
0x205 JUMPI
---
0x1d2: JUMPDEST 
0x1d3: V91 = TIMESTAMP
0x1d6: V92 = 0x0
0x1da: V93 = S[0x0]
0x1dc: V94 = 0x100
0x1df: V95 = EXP 0x100 0x0
0x1e1: V96 = DIV V93 0x1
0x1e2: V97 = 0xffffffffffffffffffffffffffffffffffffffff
0x1f7: V98 = AND 0xffffffffffffffffffffffffffffffffffffffff V96
0x1fb: V99 = 0x2
0x200: V100 = ISZERO 0x2
0x201: V101 = ISZERO 0x0
0x202: V102 = 0x207
0x205: JUMPI 0x207 0x1
---
Entry stack: [V11, 0x59, V40, 0x0, 0x0, 0x0]
Stack pops: 3
Stack additions: [V91, V98, S0, V91, 0x2, 0x2, V91]
Exit stack: [V11, 0x59, V40, V91, V98, 0x0, V91, 0x2, 0x2, V91]

================================

Block 0x206
[0x206:0x206]
---
Predecessors: [0x1d2]
Successors: []
---
0x206 INVALID
---
0x206: INVALID 
---
Entry stack: [V11, 0x59, V40, V91, V98, 0x0, V91, 0x2, 0x2, V91]
Stack pops: 0
Stack additions: []
Exit stack: [V11, 0x59, V40, V91, V98, 0x0, V91, 0x2, 0x2, V91]

================================

Block 0x207
[0x207:0x20f]
---
Predecessors: [0x1d2]
Successors: [0x210, 0x213]
---
0x207 JUMPDEST
0x208 DIV
0x209 MUL
0x20a EQ
0x20b ISZERO
0x20c PUSH2 0x213
0x20f JUMPI
---
0x207: JUMPDEST 
0x208: V103 = DIV V91 0x2
0x209: V104 = MUL V103 0x2
0x20a: V105 = EQ V104 V91
0x20b: V106 = ISZERO V105
0x20c: V107 = 0x213
0x20f: JUMPI 0x213 V106
---
Entry stack: [V11, 0x59, V40, V91, V98, 0x0, V91, 0x2, 0x2, V91]
Stack pops: 4
Stack additions: []
Exit stack: [V11, 0x59, V40, V91, V98, 0x0]

================================

Block 0x210
[0x210:0x212]
---
Predecessors: [0x207]
Successors: [0x213]
---
0x210 DUP4
0x211 SWAP2
0x212 POP
---
0x210: NOP 
---
Entry stack: [V11, 0x59, V40, V91, V98, 0x0]
Stack pops: 4
Stack additions: [S3, S2, S3, S0]
Exit stack: [V11, 0x59, V40, V91, V40, 0x0]

================================

Block 0x213
[0x213:0x2a9]
---
Predecessors: [0x207, 0x210]
Successors: [0x2aa, 0x2ae]
---
0x213 JUMPDEST
0x214 PUSH1 0x0
0x216 DUP1
0x217 PUSH1 0x0
0x219 PUSH2 0x100
0x21c EXP
0x21d DUP2
0x21e SLOAD
0x21f DUP2
0x220 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x235 MUL
0x236 NOT
0x237 AND
0x238 SWAP1
0x239 DUP4
0x23a PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x24f AND
0x250 MUL
0x251 OR
0x252 SWAP1
0x253 SSTORE
0x254 POP
0x255 ADDRESS
0x256 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x26b AND
0x26c BALANCE
0x26d SWAP1
0x26e POP
0x26f DUP2
0x270 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x285 AND
0x286 PUSH2 0x8fc
0x289 DUP3
0x28a SWAP1
0x28b DUP2
0x28c ISZERO
0x28d MUL
0x28e SWAP1
0x28f PUSH1 0x40
0x291 MLOAD
0x292 PUSH1 0x0
0x294 PUSH1 0x40
0x296 MLOAD
0x297 DUP1
0x298 DUP4
0x299 SUB
0x29a DUP2
0x29b DUP6
0x29c DUP9
0x29d DUP9
0x29e CALL
0x29f SWAP4
0x2a0 POP
0x2a1 POP
0x2a2 POP
0x2a3 POP
0x2a4 ISZERO
0x2a5 ISZERO
0x2a6 PUSH2 0x2ae
0x2a9 JUMPI
---
0x213: JUMPDEST 
0x214: V108 = 0x0
0x217: V109 = 0x0
0x219: V110 = 0x100
0x21c: V111 = EXP 0x100 0x0
0x21e: V112 = S[0x0]
0x220: V113 = 0xffffffffffffffffffffffffffffffffffffffff
0x235: V114 = MUL 0xffffffffffffffffffffffffffffffffffffffff 0x1
0x236: V115 = NOT 0xffffffffffffffffffffffffffffffffffffffff
0x237: V116 = AND 0xffffffffffffffffffffffff0000000000000000000000000000000000000000 V112
0x23a: V117 = 0xffffffffffffffffffffffffffffffffffffffff
0x24f: V118 = AND 0xffffffffffffffffffffffffffffffffffffffff 0x0
0x250: V119 = MUL 0x0 0x1
0x251: V120 = OR 0x0 V116
0x253: S[0x0] = V120
0x255: V121 = ADDRESS
0x256: V122 = 0xffffffffffffffffffffffffffffffffffffffff
0x26b: V123 = AND 0xffffffffffffffffffffffffffffffffffffffff V121
0x26c: V124 = BALANCE V123
0x270: V125 = 0xffffffffffffffffffffffffffffffffffffffff
0x285: V126 = AND 0xffffffffffffffffffffffffffffffffffffffff S1
0x286: V127 = 0x8fc
0x28c: V128 = ISZERO V124
0x28d: V129 = MUL V128 0x8fc
0x28f: V130 = 0x40
0x291: V131 = M[0x40]
0x292: V132 = 0x0
0x294: V133 = 0x40
0x296: V134 = M[0x40]
0x299: V135 = SUB V131 V134
0x29e: V136 = CALL V129 V126 V124 V134 V135 V134 0x0
0x2a4: V137 = ISZERO V136
0x2a5: V138 = ISZERO V137
0x2a6: V139 = 0x2ae
0x2a9: JUMPI 0x2ae V138
---
Entry stack: [V11, 0x59, V40, V91, S1, 0x0]
Stack pops: 2
Stack additions: [S1, V124]
Exit stack: [V11, 0x59, V40, V91, S1, V124]

================================

Block 0x2aa
[0x2aa:0x2ad]
---
Predecessors: [0x213]
Successors: []
---
0x2aa PUSH1 0x0
0x2ac DUP1
0x2ad REVERT
---
0x2aa: V140 = 0x0
0x2ad: REVERT 0x0 0x0
---
Entry stack: [V11, 0x59, V40, V91, S1, V124]
Stack pops: 0
Stack additions: []
Exit stack: [V11, 0x59, V40, V91, S1, V124]

================================

Block 0x2ae
[0x2ae:0x319]
---
Predecessors: [0x213]
Successors: [0x31a]
---
0x2ae JUMPDEST
0x2af PUSH32 0x9c2270628a9b29d30ae96b6c4c14ed646ee134febdce38a5b77f2bde9cea2e20
0x2d0 DUP3
0x2d1 DUP3
0x2d2 PUSH1 0x40
0x2d4 MLOAD
0x2d5 DUP1
0x2d6 DUP4
0x2d7 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x2ec AND
0x2ed PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x302 AND
0x303 DUP2
0x304 MSTORE
0x305 PUSH1 0x20
0x307 ADD
0x308 DUP3
0x309 DUP2
0x30a MSTORE
0x30b PUSH1 0x20
0x30d ADD
0x30e SWAP3
0x30f POP
0x310 POP
0x311 POP
0x312 PUSH1 0x40
0x314 MLOAD
0x315 DUP1
0x316 SWAP2
0x317 SUB
0x318 SWAP1
0x319 LOG1
---
0x2ae: JUMPDEST 
0x2af: V141 = 0x9c2270628a9b29d30ae96b6c4c14ed646ee134febdce38a5b77f2bde9cea2e20
0x2d2: V142 = 0x40
0x2d4: V143 = M[0x40]
0x2d7: V144 = 0xffffffffffffffffffffffffffffffffffffffff
0x2ec: V145 = AND 0xffffffffffffffffffffffffffffffffffffffff S1
0x2ed: V146 = 0xffffffffffffffffffffffffffffffffffffffff
0x302: V147 = AND 0xffffffffffffffffffffffffffffffffffffffff V145
0x304: M[V143] = V147
0x305: V148 = 0x20
0x307: V149 = ADD 0x20 V143
0x30a: M[V149] = V124
0x30b: V150 = 0x20
0x30d: V151 = ADD 0x20 V149
0x312: V152 = 0x40
0x314: V153 = M[0x40]
0x317: V154 = SUB V151 V153
0x319: LOG V153 V154 0x9c2270628a9b29d30ae96b6c4c14ed646ee134febdce38a5b77f2bde9cea2e20
---
Entry stack: [V11, 0x59, V40, V91, S1, V124]
Stack pops: 2
Stack additions: [S1, S0]
Exit stack: [V11, 0x59, V40, V91, S1, V124]

================================

Block 0x31a
[0x31a:0x31f]
---
Predecessors: [0x18e, 0x2ae]
Successors: [0x59]
---
0x31a JUMPDEST
0x31b POP
0x31c POP
0x31d POP
0x31e POP
0x31f JUMP
---
0x31a: JUMPDEST 
0x31f: JUMP 0x59
---
Entry stack: [V11, 0x59, V40, S2, S1, S0]
Stack pops: 5
Stack additions: []
Exit stack: [V11]

================================

Block 0x320
[0x320:0x344]
---
Predecessors: [0x66]
Successors: [0x6e]
---
0x320 JUMPDEST
0x321 PUSH1 0x0
0x323 DUP1
0x324 SWAP1
0x325 SLOAD
0x326 SWAP1
0x327 PUSH2 0x100
0x32a EXP
0x32b SWAP1
0x32c DIV
0x32d PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x342 AND
0x343 DUP2
0x344 JUMP
---
0x320: JUMPDEST 
0x321: V155 = 0x0
0x325: V156 = S[0x0]
0x327: V157 = 0x100
0x32a: V158 = EXP 0x100 0x0
0x32c: V159 = DIV V156 0x1
0x32d: V160 = 0xffffffffffffffffffffffffffffffffffffffff
0x342: V161 = AND 0xffffffffffffffffffffffffffffffffffffffff V159
0x344: JUMP 0x6e
---
Entry stack: [V11, 0x6e]
Stack pops: 1
Stack additions: [S0, V161]
Exit stack: [V11, 0x6e, V161]

================================

Block 0x345
[0x345:0x377]
---
Predecessors: []
Successors: []
---
0x345 STOP
0x346 LOG1
0x347 PUSH6 0x627a7a723058
0x34e SHA3
0x34f RETURN
0x350 MISSING 0xc9
0x351 SMOD
0x352 SWAP3
0x353 MISSING 0x47
0x354 MISSING 0xc6
0x355 MISSING 0xce
0x356 PUSH17 0xa7e9f360b1499b4bbb68e9a461f8686f5
0x368 MISSING 0xd5
0x369 MISSING 0xe5
0x36a ADDMOD
0x36b PUSH1 0x97
0x36d PUSH10 0xa70029
---
0x345: STOP 
0x346: LOG S0 S1 S2
0x347: V162 = 0x627a7a723058
0x34e: V163 = SHA3 0x627a7a723058 S3
0x34f: RETURN V163 S4
0x350: MISSING 0xc9
0x351: V164 = SMOD S0 S1
0x353: MISSING 0x47
0x354: MISSING 0xc6
0x355: MISSING 0xce
0x356: V165 = 0xa7e9f360b1499b4bbb68e9a461f8686f5
0x368: MISSING 0xd5
0x369: MISSING 0xe5
0x36a: V166 = ADDMOD S0 S1 S2
0x36b: V167 = 0x97
0x36d: V168 = 0xa70029
---
Entry stack: []
Stack pops: 0
Stack additions: [S4, S2, S3, V164, 0xa7e9f360b1499b4bbb68e9a461f8686f5, 0xa70029, 0x97, V166]
Exit stack: []

================================

Function 0:
Public function signature: 0xc8a76494
Entry block: 0x51
Exit block: 0x2aa
Body: 0x51, 0x59, 0xb0, 0xc8, 0xcc, 0x18e, 0x1d2, 0x206, 0x207, 0x210, 0x213, 0x2aa, 0x2ae, 0x31a

Function 1:
Public function signature: 0xd30895e4
Entry block: 0x5b
Exit block: 0x6e
Body: 0x5b, 0x62, 0x66, 0x6e, 0x320

Function 2:
Public fallback function
Entry block: 0x4c
Exit block: 0x4c
Body: 0x4c

