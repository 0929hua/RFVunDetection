args
Namespace(bytecode=False, config=None, config_file='/home/hm/project/vandal/bin/config.ini', disassembly=False, dominators=False, graph=None, infile=<_io.TextIOWrapper name='/home/hm/project/vandal/testALL/contractByteALL/contract21/7/106234.txt' mode='r' encoding='UTF-8'>, no_out=False, opcodes=[], outfile=<_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>, prolix=False, tsv=None, verbose=False, version=False)
30
None
None
Block 0x0
[0x0:0xc]
---
Predecessors: []
Successors: [0xd, 0x57]
---
0x0 PUSH1 0x80
0x2 PUSH1 0x40
0x4 MSTORE
0x5 PUSH1 0x4
0x7 CALLDATASIZE
0x8 LT
0x9 PUSH2 0x57
0xc JUMPI
---
0x0: V0 = 0x80
0x2: V1 = 0x40
0x4: M[0x40] = 0x80
0x5: V2 = 0x4
0x7: V3 = CALLDATASIZE
0x8: V4 = LT V3 0x4
0x9: V5 = 0x57
0xc: JUMPI 0x57 V4
---
Entry stack: []
Stack pops: 0
Stack additions: []
Exit stack: []

================================

Block 0xd
[0xd:0x40]
---
Predecessors: [0x0]
Successors: [0x41, 0x5c]
---
0xd PUSH1 0x0
0xf CALLDATALOAD
0x10 PUSH29 0x100000000000000000000000000000000000000000000000000000000
0x2e SWAP1
0x2f DIV
0x30 PUSH4 0xffffffff
0x35 AND
0x36 DUP1
0x37 PUSH4 0x354284f2
0x3c EQ
0x3d PUSH2 0x5c
0x40 JUMPI
---
0xd: V6 = 0x0
0xf: V7 = CALLDATALOAD 0x0
0x10: V8 = 0x100000000000000000000000000000000000000000000000000000000
0x2f: V9 = DIV V7 0x100000000000000000000000000000000000000000000000000000000
0x30: V10 = 0xffffffff
0x35: V11 = AND 0xffffffff V9
0x37: V12 = 0x354284f2
0x3c: V13 = EQ 0x354284f2 V11
0x3d: V14 = 0x5c
0x40: JUMPI 0x5c V13
---
Entry stack: []
Stack pops: 0
Stack additions: [V11]
Exit stack: [V11]

================================

Block 0x41
[0x41:0x4b]
---
Predecessors: [0xd]
Successors: [0x4c, 0x73]
---
0x41 DUP1
0x42 PUSH4 0x4a3f17e7
0x47 EQ
0x48 PUSH2 0x73
0x4b JUMPI
---
0x42: V15 = 0x4a3f17e7
0x47: V16 = EQ 0x4a3f17e7 V11
0x48: V17 = 0x73
0x4b: JUMPI 0x73 V16
---
Entry stack: [V11]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V11]

================================

Block 0x4c
[0x4c:0x56]
---
Predecessors: [0x41]
Successors: [0x57, 0xca]
---
0x4c DUP1
0x4d PUSH4 0x60f14509
0x52 EQ
0x53 PUSH2 0xca
0x56 JUMPI
---
0x4d: V18 = 0x60f14509
0x52: V19 = EQ 0x60f14509 V11
0x53: V20 = 0xca
0x56: JUMPI 0xca V19
---
Entry stack: [V11]
Stack pops: 1
Stack additions: [S0]
Exit stack: [V11]

================================

Block 0x57
[0x57:0x5b]
---
Predecessors: [0x0, 0x4c]
Successors: []
---
0x57 JUMPDEST
0x58 PUSH1 0x0
0x5a DUP1
0x5b REVERT
---
0x57: JUMPDEST 
0x58: V21 = 0x0
0x5b: REVERT 0x0 0x0
---
Entry stack: [V11]
Stack pops: 0
Stack additions: []
Exit stack: [V11]

================================

Block 0x5c
[0x5c:0x63]
---
Predecessors: [0xd]
Successors: [0x64, 0x68]
---
0x5c JUMPDEST
0x5d CALLVALUE
0x5e DUP1
0x5f ISZERO
0x60 PUSH2 0x68
0x63 JUMPI
---
0x5c: JUMPDEST 
0x5d: V22 = CALLVALUE
0x5f: V23 = ISZERO V22
0x60: V24 = 0x68
0x63: JUMPI 0x68 V23
---
Entry stack: [V11]
Stack pops: 0
Stack additions: [V22]
Exit stack: [V11, V22]

================================

Block 0x64
[0x64:0x67]
---
Predecessors: [0x5c]
Successors: []
---
0x64 PUSH1 0x0
0x66 DUP1
0x67 REVERT
---
0x64: V25 = 0x0
0x67: REVERT 0x0 0x0
---
Entry stack: [V11, V22]
Stack pops: 0
Stack additions: []
Exit stack: [V11, V22]

================================

Block 0x68
[0x68:0x70]
---
Predecessors: [0x5c]
Successors: [0xd4]
---
0x68 JUMPDEST
0x69 POP
0x6a PUSH2 0x71
0x6d PUSH2 0xd4
0x70 JUMP
---
0x68: JUMPDEST 
0x6a: V26 = 0x71
0x6d: V27 = 0xd4
0x70: JUMP 0xd4
---
Entry stack: [V11, V22]
Stack pops: 1
Stack additions: [0x71]
Exit stack: [V11, 0x71]

================================

Block 0x71
[0x71:0x72]
---
Predecessors: [0x1fd]
Successors: []
---
0x71 JUMPDEST
0x72 STOP
---
0x71: JUMPDEST 
0x72: STOP 
---
Entry stack: [V11]
Stack pops: 0
Stack additions: []
Exit stack: [V11]

================================

Block 0x73
[0x73:0x7a]
---
Predecessors: [0x41]
Successors: [0x7b, 0x7f]
---
0x73 JUMPDEST
0x74 CALLVALUE
0x75 DUP1
0x76 ISZERO
0x77 PUSH2 0x7f
0x7a JUMPI
---
0x73: JUMPDEST 
0x74: V28 = CALLVALUE
0x76: V29 = ISZERO V28
0x77: V30 = 0x7f
0x7a: JUMPI 0x7f V29
---
Entry stack: [V11]
Stack pops: 0
Stack additions: [V28]
Exit stack: [V11, V28]

================================

Block 0x7b
[0x7b:0x7e]
---
Predecessors: [0x73]
Successors: []
---
0x7b PUSH1 0x0
0x7d DUP1
0x7e REVERT
---
0x7b: V31 = 0x0
0x7e: REVERT 0x0 0x0
---
Entry stack: [V11, V28]
Stack pops: 0
Stack additions: []
Exit stack: [V11, V28]

================================

Block 0x7f
[0x7f:0xb3]
---
Predecessors: [0x73]
Successors: [0x245]
---
0x7f JUMPDEST
0x80 POP
0x81 PUSH2 0xb4
0x84 PUSH1 0x4
0x86 DUP1
0x87 CALLDATASIZE
0x88 SUB
0x89 DUP2
0x8a ADD
0x8b SWAP1
0x8c DUP1
0x8d DUP1
0x8e CALLDATALOAD
0x8f PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0xa4 AND
0xa5 SWAP1
0xa6 PUSH1 0x20
0xa8 ADD
0xa9 SWAP1
0xaa SWAP3
0xab SWAP2
0xac SWAP1
0xad POP
0xae POP
0xaf POP
0xb0 PUSH2 0x245
0xb3 JUMP
---
0x7f: JUMPDEST 
0x81: V32 = 0xb4
0x84: V33 = 0x4
0x87: V34 = CALLDATASIZE
0x88: V35 = SUB V34 0x4
0x8a: V36 = ADD 0x4 V35
0x8e: V37 = CALLDATALOAD 0x4
0x8f: V38 = 0xffffffffffffffffffffffffffffffffffffffff
0xa4: V39 = AND 0xffffffffffffffffffffffffffffffffffffffff V37
0xa6: V40 = 0x20
0xa8: V41 = ADD 0x20 0x4
0xb0: V42 = 0x245
0xb3: JUMP 0x245
---
Entry stack: [V11, V28]
Stack pops: 1
Stack additions: [0xb4, V39]
Exit stack: [V11, 0xb4, V39]

================================

Block 0xb4
[0xb4:0xc9]
---
Predecessors: [0x245]
Successors: []
---
0xb4 JUMPDEST
0xb5 PUSH1 0x40
0xb7 MLOAD
0xb8 DUP1
0xb9 DUP3
0xba DUP2
0xbb MSTORE
0xbc PUSH1 0x20
0xbe ADD
0xbf SWAP2
0xc0 POP
0xc1 POP
0xc2 PUSH1 0x40
0xc4 MLOAD
0xc5 DUP1
0xc6 SWAP2
0xc7 SUB
0xc8 SWAP1
0xc9 RETURN
---
0xb4: JUMPDEST 
0xb5: V43 = 0x40
0xb7: V44 = M[0x40]
0xbb: M[V44] = V139
0xbc: V45 = 0x20
0xbe: V46 = ADD 0x20 V44
0xc2: V47 = 0x40
0xc4: V48 = M[0x40]
0xc7: V49 = SUB V46 V48
0xc9: RETURN V48 V49
---
Entry stack: [V11, 0xb4, V139]
Stack pops: 1
Stack additions: []
Exit stack: [V11, 0xb4]

================================

Block 0xca
[0xca:0xd1]
---
Predecessors: [0x4c]
Successors: [0x25d]
---
0xca JUMPDEST
0xcb PUSH2 0xd2
0xce PUSH2 0x25d
0xd1 JUMP
---
0xca: JUMPDEST 
0xcb: V50 = 0xd2
0xce: V51 = 0x25d
0xd1: JUMP 0x25d
---
Entry stack: [V11]
Stack pops: 0
Stack additions: [0xd2]
Exit stack: [V11, 0xd2]

================================

Block 0xd2
[0xd2:0xd3]
---
Predecessors: [0x25d]
Successors: []
---
0xd2 JUMPDEST
0xd3 STOP
---
0xd2: JUMPDEST 
0xd3: STOP 
---
Entry stack: [V11]
Stack pops: 0
Stack additions: []
Exit stack: [V11]

================================

Block 0xd4
[0xd4:0xe3]
---
Predecessors: [0x68]
Successors: [0xe4, 0x127]
---
0xd4 JUMPDEST
0xd5 PUSH1 0x0
0xd7 PUSH4 0x5b89d680
0xdc TIMESTAMP
0xdd GT
0xde DUP1
0xdf ISZERO
0xe0 PUSH2 0x127
0xe3 JUMPI
---
0xd4: JUMPDEST 
0xd5: V52 = 0x0
0xd7: V53 = 0x5b89d680
0xdc: V54 = TIMESTAMP
0xdd: V55 = GT V54 0x5b89d680
0xdf: V56 = ISZERO V55
0xe0: V57 = 0x127
0xe3: JUMPI 0x127 V56
---
Entry stack: [V11, 0x71]
Stack pops: 0
Stack additions: [0x0, V55]
Exit stack: [V11, 0x71, 0x0, V55]

================================

Block 0xe4
[0xe4:0x126]
---
Predecessors: [0xd4]
Successors: [0x127]
---
0xe4 POP
0xe5 PUSH1 0x0
0xe7 DUP1
0xe8 PUSH1 0x0
0xea CALLER
0xeb PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x100 AND
0x101 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x116 AND
0x117 DUP2
0x118 MSTORE
0x119 PUSH1 0x20
0x11b ADD
0x11c SWAP1
0x11d DUP2
0x11e MSTORE
0x11f PUSH1 0x20
0x121 ADD
0x122 PUSH1 0x0
0x124 SHA3
0x125 SLOAD
0x126 GT
---
0xe5: V58 = 0x0
0xe8: V59 = 0x0
0xea: V60 = CALLER
0xeb: V61 = 0xffffffffffffffffffffffffffffffffffffffff
0x100: V62 = AND 0xffffffffffffffffffffffffffffffffffffffff V60
0x101: V63 = 0xffffffffffffffffffffffffffffffffffffffff
0x116: V64 = AND 0xffffffffffffffffffffffffffffffffffffffff V62
0x118: M[0x0] = V64
0x119: V65 = 0x20
0x11b: V66 = ADD 0x20 0x0
0x11e: M[0x20] = 0x0
0x11f: V67 = 0x20
0x121: V68 = ADD 0x20 0x20
0x122: V69 = 0x0
0x124: V70 = SHA3 0x0 0x40
0x125: V71 = S[V70]
0x126: V72 = GT V71 0x0
---
Entry stack: [V11, 0x71, 0x0, V55]
Stack pops: 1
Stack additions: [V72]
Exit stack: [V11, 0x71, 0x0, V72]

================================

Block 0x127
[0x127:0x12d]
---
Predecessors: [0xd4, 0xe4]
Successors: [0x12e, 0x132]
---
0x127 JUMPDEST
0x128 ISZERO
0x129 ISZERO
0x12a PUSH2 0x132
0x12d JUMPI
---
0x127: JUMPDEST 
0x128: V73 = ISZERO S0
0x129: V74 = ISZERO V73
0x12a: V75 = 0x132
0x12d: JUMPI 0x132 V74
---
Entry stack: [V11, 0x71, 0x0, S0]
Stack pops: 1
Stack additions: []
Exit stack: [V11, 0x71, 0x0]

================================

Block 0x12e
[0x12e:0x131]
---
Predecessors: [0x127]
Successors: []
---
0x12e PUSH1 0x0
0x130 DUP1
0x131 REVERT
---
0x12e: V76 = 0x0
0x131: REVERT 0x0 0x0
---
Entry stack: [V11, 0x71, 0x0]
Stack pops: 0
Stack additions: []
Exit stack: [V11, 0x71, 0x0]

================================

Block 0x132
[0x132:0x1f3]
---
Predecessors: [0x127]
Successors: [0x1f4, 0x1fd]
---
0x132 JUMPDEST
0x133 PUSH1 0x0
0x135 DUP1
0x136 CALLER
0x137 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x14c AND
0x14d PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x162 AND
0x163 DUP2
0x164 MSTORE
0x165 PUSH1 0x20
0x167 ADD
0x168 SWAP1
0x169 DUP2
0x16a MSTORE
0x16b PUSH1 0x20
0x16d ADD
0x16e PUSH1 0x0
0x170 SHA3
0x171 SLOAD
0x172 SWAP1
0x173 POP
0x174 PUSH1 0x0
0x176 DUP1
0x177 PUSH1 0x0
0x179 CALLER
0x17a PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x18f AND
0x190 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x1a5 AND
0x1a6 DUP2
0x1a7 MSTORE
0x1a8 PUSH1 0x20
0x1aa ADD
0x1ab SWAP1
0x1ac DUP2
0x1ad MSTORE
0x1ae PUSH1 0x20
0x1b0 ADD
0x1b1 PUSH1 0x0
0x1b3 SHA3
0x1b4 DUP2
0x1b5 SWAP1
0x1b6 SSTORE
0x1b7 POP
0x1b8 CALLER
0x1b9 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x1ce AND
0x1cf PUSH2 0x8fc
0x1d2 DUP3
0x1d3 SWAP1
0x1d4 DUP2
0x1d5 ISZERO
0x1d6 MUL
0x1d7 SWAP1
0x1d8 PUSH1 0x40
0x1da MLOAD
0x1db PUSH1 0x0
0x1dd PUSH1 0x40
0x1df MLOAD
0x1e0 DUP1
0x1e1 DUP4
0x1e2 SUB
0x1e3 DUP2
0x1e4 DUP6
0x1e5 DUP9
0x1e6 DUP9
0x1e7 CALL
0x1e8 SWAP4
0x1e9 POP
0x1ea POP
0x1eb POP
0x1ec POP
0x1ed ISZERO
0x1ee DUP1
0x1ef ISZERO
0x1f0 PUSH2 0x1fd
0x1f3 JUMPI
---
0x132: JUMPDEST 
0x133: V77 = 0x0
0x136: V78 = CALLER
0x137: V79 = 0xffffffffffffffffffffffffffffffffffffffff
0x14c: V80 = AND 0xffffffffffffffffffffffffffffffffffffffff V78
0x14d: V81 = 0xffffffffffffffffffffffffffffffffffffffff
0x162: V82 = AND 0xffffffffffffffffffffffffffffffffffffffff V80
0x164: M[0x0] = V82
0x165: V83 = 0x20
0x167: V84 = ADD 0x20 0x0
0x16a: M[0x20] = 0x0
0x16b: V85 = 0x20
0x16d: V86 = ADD 0x20 0x20
0x16e: V87 = 0x0
0x170: V88 = SHA3 0x0 0x40
0x171: V89 = S[V88]
0x174: V90 = 0x0
0x177: V91 = 0x0
0x179: V92 = CALLER
0x17a: V93 = 0xffffffffffffffffffffffffffffffffffffffff
0x18f: V94 = AND 0xffffffffffffffffffffffffffffffffffffffff V92
0x190: V95 = 0xffffffffffffffffffffffffffffffffffffffff
0x1a5: V96 = AND 0xffffffffffffffffffffffffffffffffffffffff V94
0x1a7: M[0x0] = V96
0x1a8: V97 = 0x20
0x1aa: V98 = ADD 0x20 0x0
0x1ad: M[0x20] = 0x0
0x1ae: V99 = 0x20
0x1b0: V100 = ADD 0x20 0x20
0x1b1: V101 = 0x0
0x1b3: V102 = SHA3 0x0 0x40
0x1b6: S[V102] = 0x0
0x1b8: V103 = CALLER
0x1b9: V104 = 0xffffffffffffffffffffffffffffffffffffffff
0x1ce: V105 = AND 0xffffffffffffffffffffffffffffffffffffffff V103
0x1cf: V106 = 0x8fc
0x1d5: V107 = ISZERO V89
0x1d6: V108 = MUL V107 0x8fc
0x1d8: V109 = 0x40
0x1da: V110 = M[0x40]
0x1db: V111 = 0x0
0x1dd: V112 = 0x40
0x1df: V113 = M[0x40]
0x1e2: V114 = SUB V110 V113
0x1e7: V115 = CALL V108 V105 V89 V113 V114 V113 0x0
0x1ed: V116 = ISZERO V115
0x1ef: V117 = ISZERO V116
0x1f0: V118 = 0x1fd
0x1f3: JUMPI 0x1fd V117
---
Entry stack: [V11, 0x71, 0x0]
Stack pops: 1
Stack additions: [V89, V116]
Exit stack: [V11, 0x71, V89, V116]

================================

Block 0x1f4
[0x1f4:0x1fc]
---
Predecessors: [0x132]
Successors: []
---
0x1f4 RETURNDATASIZE
0x1f5 PUSH1 0x0
0x1f7 DUP1
0x1f8 RETURNDATACOPY
0x1f9 RETURNDATASIZE
0x1fa PUSH1 0x0
0x1fc REVERT
---
0x1f4: V119 = RETURNDATASIZE
0x1f5: V120 = 0x0
0x1f8: RETURNDATACOPY 0x0 0x0 V119
0x1f9: V121 = RETURNDATASIZE
0x1fa: V122 = 0x0
0x1fc: REVERT 0x0 V121
---
Entry stack: [V11, 0x71, V89, V116]
Stack pops: 0
Stack additions: []
Exit stack: [V11, 0x71, V89, V116]

================================

Block 0x1fd
[0x1fd:0x244]
---
Predecessors: [0x132]
Successors: [0x71]
---
0x1fd JUMPDEST
0x1fe POP
0x1ff DUP1
0x200 CALLER
0x201 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x216 AND
0x217 PUSH32 0xdc8f43545dbeec87c6f54e44dac2d8889f2a4b3bf0f62683cd7e1c6346128e7
0x238 PUSH1 0x40
0x23a MLOAD
0x23b PUSH1 0x40
0x23d MLOAD
0x23e DUP1
0x23f SWAP2
0x240 SUB
0x241 SWAP1
0x242 LOG3
0x243 POP
0x244 JUMP
---
0x1fd: JUMPDEST 
0x200: V123 = CALLER
0x201: V124 = 0xffffffffffffffffffffffffffffffffffffffff
0x216: V125 = AND 0xffffffffffffffffffffffffffffffffffffffff V123
0x217: V126 = 0xdc8f43545dbeec87c6f54e44dac2d8889f2a4b3bf0f62683cd7e1c6346128e7
0x238: V127 = 0x40
0x23a: V128 = M[0x40]
0x23b: V129 = 0x40
0x23d: V130 = M[0x40]
0x240: V131 = SUB V128 V130
0x242: LOG V130 V131 0xdc8f43545dbeec87c6f54e44dac2d8889f2a4b3bf0f62683cd7e1c6346128e7 V125 V89
0x244: JUMP 0x71
---
Entry stack: [V11, 0x71, V89, V116]
Stack pops: 3
Stack additions: []
Exit stack: [V11]

================================

Block 0x245
[0x245:0x25c]
---
Predecessors: [0x7f]
Successors: [0xb4]
---
0x245 JUMPDEST
0x246 PUSH1 0x0
0x248 PUSH1 0x20
0x24a MSTORE
0x24b DUP1
0x24c PUSH1 0x0
0x24e MSTORE
0x24f PUSH1 0x40
0x251 PUSH1 0x0
0x253 SHA3
0x254 PUSH1 0x0
0x256 SWAP2
0x257 POP
0x258 SWAP1
0x259 POP
0x25a SLOAD
0x25b DUP2
0x25c JUMP
---
0x245: JUMPDEST 
0x246: V132 = 0x0
0x248: V133 = 0x20
0x24a: M[0x20] = 0x0
0x24c: V134 = 0x0
0x24e: M[0x0] = V39
0x24f: V135 = 0x40
0x251: V136 = 0x0
0x253: V137 = SHA3 0x0 0x40
0x254: V138 = 0x0
0x25a: V139 = S[V137]
0x25c: JUMP 0xb4
---
Entry stack: [V11, 0xb4, V39]
Stack pops: 2
Stack additions: [S1, V139]
Exit stack: [V11, 0xb4, V139]

================================

Block 0x25d
[0x25d:0x2ee]
---
Predecessors: [0xca]
Successors: [0xd2]
---
0x25d JUMPDEST
0x25e CALLVALUE
0x25f PUSH1 0x0
0x261 DUP1
0x262 CALLER
0x263 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x278 AND
0x279 PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x28e AND
0x28f DUP2
0x290 MSTORE
0x291 PUSH1 0x20
0x293 ADD
0x294 SWAP1
0x295 DUP2
0x296 MSTORE
0x297 PUSH1 0x20
0x299 ADD
0x29a PUSH1 0x0
0x29c SHA3
0x29d PUSH1 0x0
0x29f DUP3
0x2a0 DUP3
0x2a1 SLOAD
0x2a2 ADD
0x2a3 SWAP3
0x2a4 POP
0x2a5 POP
0x2a6 DUP2
0x2a7 SWAP1
0x2a8 SSTORE
0x2a9 POP
0x2aa CALLVALUE
0x2ab CALLER
0x2ac PUSH20 0xffffffffffffffffffffffffffffffffffffffff
0x2c1 AND
0x2c2 PUSH32 0x115522125a340a348d82c36b243d9dcbb357931a24824ddbe1d13179155e3091
0x2e3 PUSH1 0x40
0x2e5 MLOAD
0x2e6 PUSH1 0x40
0x2e8 MLOAD
0x2e9 DUP1
0x2ea SWAP2
0x2eb SUB
0x2ec SWAP1
0x2ed LOG3
0x2ee JUMP
---
0x25d: JUMPDEST 
0x25e: V140 = CALLVALUE
0x25f: V141 = 0x0
0x262: V142 = CALLER
0x263: V143 = 0xffffffffffffffffffffffffffffffffffffffff
0x278: V144 = AND 0xffffffffffffffffffffffffffffffffffffffff V142
0x279: V145 = 0xffffffffffffffffffffffffffffffffffffffff
0x28e: V146 = AND 0xffffffffffffffffffffffffffffffffffffffff V144
0x290: M[0x0] = V146
0x291: V147 = 0x20
0x293: V148 = ADD 0x20 0x0
0x296: M[0x20] = 0x0
0x297: V149 = 0x20
0x299: V150 = ADD 0x20 0x20
0x29a: V151 = 0x0
0x29c: V152 = SHA3 0x0 0x40
0x29d: V153 = 0x0
0x2a1: V154 = S[V152]
0x2a2: V155 = ADD V154 V140
0x2a8: S[V152] = V155
0x2aa: V156 = CALLVALUE
0x2ab: V157 = CALLER
0x2ac: V158 = 0xffffffffffffffffffffffffffffffffffffffff
0x2c1: V159 = AND 0xffffffffffffffffffffffffffffffffffffffff V157
0x2c2: V160 = 0x115522125a340a348d82c36b243d9dcbb357931a24824ddbe1d13179155e3091
0x2e3: V161 = 0x40
0x2e5: V162 = M[0x40]
0x2e6: V163 = 0x40
0x2e8: V164 = M[0x40]
0x2eb: V165 = SUB V162 V164
0x2ed: LOG V164 V165 0x115522125a340a348d82c36b243d9dcbb357931a24824ddbe1d13179155e3091 V159 V156
0x2ee: JUMP 0xd2
---
Entry stack: [V11, 0xd2]
Stack pops: 1
Stack additions: []
Exit stack: [V11]

================================

Block 0x2ef
[0x2ef:0x32f]
---
Predecessors: []
Successors: []
---
0x2ef STOP
0x2f0 LOG1
0x2f1 PUSH6 0x627a7a723058
0x2f8 SHA3
0x2f9 SMOD
0x2fa PUSH5 0x21a762a992
0x300 MUL
0x301 MISSING 0xbf
0x302 MISSING 0xbb
0x303 MISSING 0x48
0x304 ADDMOD
0x305 PUSH2 0x9023
0x308 MISSING 0x5f
0x309 MISSING 0xe2
0x30a MISSING 0xd
0x30b LOG2
0x30c MISSING 0xce
0x30d MISSING 0xbd
0x30e MISSING 0x28
0x30f RETURN
0x310 PUSH31 0xa0e39c1f577b77080029
---
0x2ef: STOP 
0x2f0: LOG S0 S1 S2
0x2f1: V166 = 0x627a7a723058
0x2f8: V167 = SHA3 0x627a7a723058 S3
0x2f9: V168 = SMOD V167 S4
0x2fa: V169 = 0x21a762a992
0x300: V170 = MUL 0x21a762a992 V168
0x301: MISSING 0xbf
0x302: MISSING 0xbb
0x303: MISSING 0x48
0x304: V171 = ADDMOD S0 S1 S2
0x305: V172 = 0x9023
0x308: MISSING 0x5f
0x309: MISSING 0xe2
0x30a: MISSING 0xd
0x30b: LOG S0 S1 S2 S3
0x30c: MISSING 0xce
0x30d: MISSING 0xbd
0x30e: MISSING 0x28
0x30f: RETURN S0 S1
0x310: V173 = 0xa0e39c1f577b77080029
---
Entry stack: []
Stack pops: 0
Stack additions: [V170, 0x9023, V171, 0xa0e39c1f577b77080029]
Exit stack: []

================================

Function 0:
Public function signature: 0x354284f2
Entry block: 0x5c
Exit block: 0x71
Body: 0x5c, 0x64, 0x68, 0x71, 0xd4, 0xe4, 0x127, 0x12e, 0x132, 0x1f4, 0x1fd

Function 1:
Public function signature: 0x4a3f17e7
Entry block: 0x73
Exit block: 0xb4
Body: 0x73, 0x7b, 0x7f, 0xb4, 0x245

Function 2:
Public function signature: 0x60f14509
Entry block: 0xca
Exit block: 0xd2
Body: 0xca, 0xd2, 0x25d

Function 3:
Public fallback function
Entry block: 0x57
Exit block: 0x57
Body: 0x57

